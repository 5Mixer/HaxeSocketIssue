// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_sys_net_Host
#include <sys/net/Host.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif


void Main_obj::__construct(){
            	HX_STACK_FRAME("Main","new",0x6616a5cb,"Main.new","Main.hx",8,0x087e5c05)
            	HX_STACK_THIS(this)
HXLINE(  11)		HX_VARI(  ::sys::net::Socket,listener) =  ::sys::net::Socket_obj::__new();
HXLINE(  12)		HX_VARI( ::Array< ::Dynamic>,readSockets) = ::Array_obj< ::Dynamic>::__new(1)->init(0,listener);
HXLINE(  14)		::String _hx_tmp = ::sys::net::Host_obj::localhost();
HXDLIN(  14)		listener->bind( ::sys::net::Host_obj::__new(_hx_tmp),(int)8080);
HXLINE(  15)		listener->listen((int)1);
HXLINE(  17)		HX_VARI(  ::Dynamic,socketStuff) = ::sys::net::Socket_obj::select(readSockets,null(),null(),(int)60);
HXLINE(  19)		{
HXLINE(  19)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  19)			HX_VARI( ::Array< ::Dynamic>,_g1) = ( (::Array< ::Dynamic>)(socketStuff->__Field(HX_("read",56,4b,a7,4b),hx::paccDynamic)) );
HXDLIN(  19)			while((_g < _g1->length)){
HXLINE(  19)				HX_VARI(  ::sys::net::Socket,socket) = _g1->__get(_g).StaticCast<  ::sys::net::Socket >();
HXDLIN(  19)				++_g;
            			}
            		}
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

hx::ObjectPtr< Main_obj > Main_obj::__new()
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Main_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Main_obj::main(){
            	HX_STACK_FRAME("Main","main",0xed0e206e,"Main.main","Main.hx",28,0x087e5c05)
HXLINE(  28)		 ::Main_obj::__new();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::__mClass,"__mClass");
};

#endif

hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	::String(null())
};

void Main_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Main","\x59","\x64","\x2f","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

